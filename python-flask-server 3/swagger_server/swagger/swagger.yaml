---
swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about\
    \     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\
    \ #swagger](http://swagger.io/irc/).      For this sample, you can use the api\
    \ key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "targetImage"
  description: "Everything about your Target Image"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "mosaic"
  description: "Access to Mosaic Image processing"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our mosaic"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /targetImage:
    post:
      tags:
      - "targetImage"
      summary: "Add a new Target Image to be processed as a mosaic"
      description: ""
      operationId: "add_pet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "TargetImage object that needs to be added to be processed into\
          \ a mosaic"
        required: true
        schema:
          $ref: "#/definitions/TargetImage"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TargetImage"
        "405":
          description: "Invalid input"
      x-swagger-router-controller: "swagger_server.controllers.target_image_controller"
    put:
      tags:
      - "targetImage"
      summary: "Update an existing Target Image"
      description: ""
      operationId: "update_pet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "TargetImage object that needs to be added to be processed as\
          \ a mosaic."
        required: true
        schema:
          $ref: "#/definitions/TargetImage"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "TargetImage not found"
        "405":
          description: "Validation exception"
      x-swagger-router-controller: "swagger_server.controllers.target_image_controller"
  /targetImage/findByTags:
    get:
      tags:
      - "targetImage"
      summary: "Finds Target Image by tags"
      description: "Muliple tags can be provided with comma separated strings. Use\
        \         tag1, tag2, tag3 for testing."
      operationId: "find_pets_by_tags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TargetImage"
        "400":
          description: "Invalid tag value"
      x-swagger-router-controller: "swagger_server.controllers.target_image_controller"
  /targetImage/{targetImageId}:
    get:
      tags:
      - "targetImage"
      summary: "Find Target Image by ID"
      description: "Returns a single targetImage"
      operationId: "get_pet_by_id"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "targetImageId"
        in: "path"
        description: "ID of targetImage to return"
        required: true
        type: "integer"
        format: "int64"
      security:
      - api_key: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TargetImage"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "TargetImage not found"
      x-swagger-router-controller: "swagger_server.controllers.target_image_controller"
    delete:
      tags:
      - "targetImage"
      summary: "Deletes a Target Image"
      description: ""
      operationId: "delete_pet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "targetImageId"
        in: "path"
        description: "TargetImage id to delete"
        required: true
        type: "integer"
        format: "int64"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "TargetImage not found"
      x-swagger-router-controller: "swagger_server.controllers.target_image_controller"
  /mosaic/process:
    post:
      tags:
      - "mosaic"
      summary: "Place a process order for a Mosaic Image"
      description: ""
      operationId: "place_order"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for processing the targetImage"
        required: true
        schema:
          $ref: "#/definitions/Process"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Process"
        "400":
          description: "Invalid Process"
      x-swagger-router-controller: "swagger_server.controllers.mosaic_controller"
  /mosaic/process/{processId}:
    get:
      tags:
      - "mosaic"
      summary: "Find past processes by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.\
        \         Other values will generated exceptions"
      operationId: "get_order_by_id"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "processId"
        in: "path"
        description: "ID of targetImage that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10
        minimum: 1
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Process"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Process not found"
      x-swagger-router-controller: "swagger_server.controllers.mosaic_controller"
    delete:
      tags:
      - "mosaic"
      summary: "Delete past process by ID"
      description: "For valid response try integer IDs with positive integer value.\
        \         Negative or non-integer values will generate API errors"
      operationId: "delete_order"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "processId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Process not found"
      x-swagger-router-controller: "swagger_server.controllers.mosaic_controller"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "create_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "create_users_with_array_input"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "create_users_with_list_input"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "login_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logout_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "get_user_by_name"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "update_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "delete_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
    x-tokenInfoFunc: "swagger_server.controllers.authorization_controller.check_petstore_auth"
    x-scopeValidateFunc: "swagger_server.controllers.authorization_controller.validate_scope_petstore_auth"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    x-apikeyInfoFunc: "swagger_server.controllers.authorization_controller.check_api_key"
definitions:
  Process:
    type: "object"
    required:
    - "targetImageId"
    properties:
      id:
        type: "integer"
        format: "int64"
      targetImageId:
        type: "integer"
        format: "int64"
      startDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Process Status"
        default: "ready"
        enum:
        - "ready"
        - "processing"
        - "done"
      complete:
        type: "boolean"
        default: false
      mosaicImageUrl:
        type: "string"
    xml:
      name: "Process"
    example:
      mosaicImageUrl: "mosaicImageUrl"
      id: 0
      targetImageId: 6
      complete: false
      startDate: "2000-01-23T04:56:07.000+00:00"
      status: "ready"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
    example:
      name: "name"
      id: 6
  TargetImage:
    type: "object"
    required:
    - "name"
    - "tileImageUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "doggie image"
      tileImageUrls:
        type: "array"
        xml:
          name: "imageTileUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
    xml:
      name: "TargetImage"
    example:
      name: "doggie image"
      tileImageUrls:
      - "tileImageUrls"
      - "tileImageUrls"
      id: 0
      tags:
      - name: "name"
        id: 6
      - name: "name"
        id: 6
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
