# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Process(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, target_image_id: int=None, start_date: datetime=None, status: str='ready', complete: bool=False, mosaic_image_url: str=None):  # noqa: E501
        """Process - a model defined in Swagger

        :param id: The id of this Process.  # noqa: E501
        :type id: int
        :param target_image_id: The target_image_id of this Process.  # noqa: E501
        :type target_image_id: int
        :param start_date: The start_date of this Process.  # noqa: E501
        :type start_date: datetime
        :param status: The status of this Process.  # noqa: E501
        :type status: str
        :param complete: The complete of this Process.  # noqa: E501
        :type complete: bool
        :param mosaic_image_url: The mosaic_image_url of this Process.  # noqa: E501
        :type mosaic_image_url: str
        """
        self.swagger_types = {
            'id': int,
            'target_image_id': int,
            'start_date': datetime,
            'status': str,
            'complete': bool,
            'mosaic_image_url': str
        }

        self.attribute_map = {
            'id': 'id',
            'target_image_id': 'targetImageId',
            'start_date': 'startDate',
            'status': 'status',
            'complete': 'complete',
            'mosaic_image_url': 'mosaicImageUrl'
        }

        self._id = id
        self._target_image_id = target_image_id
        self._start_date = start_date
        self._status = status
        self._complete = complete
        self._mosaic_image_url = mosaic_image_url

    @classmethod
    def from_dict(cls, dikt) -> 'Process':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Process of this Process.  # noqa: E501
        :rtype: Process
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Process.


        :return: The id of this Process.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Process.


        :param id: The id of this Process.
        :type id: int
        """

        self._id = id

    @property
    def target_image_id(self) -> int:
        """Gets the target_image_id of this Process.


        :return: The target_image_id of this Process.
        :rtype: int
        """
        return self._target_image_id

    @target_image_id.setter
    def target_image_id(self, target_image_id: int):
        """Sets the target_image_id of this Process.


        :param target_image_id: The target_image_id of this Process.
        :type target_image_id: int
        """
        if target_image_id is None:
            raise ValueError("Invalid value for `target_image_id`, must not be `None`")  # noqa: E501

        self._target_image_id = target_image_id

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this Process.


        :return: The start_date of this Process.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this Process.


        :param start_date: The start_date of this Process.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def status(self) -> str:
        """Gets the status of this Process.

        Process Status  # noqa: E501

        :return: The status of this Process.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Process.

        Process Status  # noqa: E501

        :param status: The status of this Process.
        :type status: str
        """
        allowed_values = ["ready", "processing", "done"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def complete(self) -> bool:
        """Gets the complete of this Process.


        :return: The complete of this Process.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete: bool):
        """Sets the complete of this Process.


        :param complete: The complete of this Process.
        :type complete: bool
        """

        self._complete = complete

    @property
    def mosaic_image_url(self) -> str:
        """Gets the mosaic_image_url of this Process.


        :return: The mosaic_image_url of this Process.
        :rtype: str
        """
        return self._mosaic_image_url

    @mosaic_image_url.setter
    def mosaic_image_url(self, mosaic_image_url: str):
        """Sets the mosaic_image_url of this Process.


        :param mosaic_image_url: The mosaic_image_url of this Process.
        :type mosaic_image_url: str
        """

        self._mosaic_image_url = mosaic_image_url
