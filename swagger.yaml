swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "127.0.0.1:8080"
basePath: "/v2"
tags:
- name: "targetImage"
  description: "Everything about your Target Image"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "mosaic"
  description: "Access to Mosaic Image processing"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our mosaic"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /targetImage:
    post:
      tags:
      - "targetImage"
      summary: "Add a new Target Image to be processed as a mosaic"
      description: ""
      operationId: "addTargetImage"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "TargetImage object that needs to be added to be processed into a mosaic"
        required: true
        schema:
          $ref: "#/definitions/TargetImage"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TargetImage"
        "405":
          description: "Invalid input"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
    put:
      tags:
      - "targetImage"
      summary: "Update an existing Target Image"
      description: ""
      operationId: "updateTargetImage"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "TargetImage object that needs to be added to be processed as a mosaic."
        required: true
        schema:
          $ref: "#/definitions/TargetImage"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "TargetImage not found"
        "405":
          description: "Validation exception"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
  # /targetImage/findByStatus:
  #   get:
  #     tags:
  #     - "targetImage"
  #     summary: "Finds Target Image by status"
  #     description: "Multiple status values can be provided with comma separated strings"
  #     operationId: "findPetsByStatus"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "status"
  #       in: "query"
  #       description: "Status values that need to be considered for filter"
  #       required: true
  #       type: "array"
  #       items:
  #         type: "string"
  #       enum:
  #       - "ready"
  #       - "processing"
  #       - "done"
  #       default: "ready"
  #       collectionFormat: "multi"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           type: "array"
  #           items:
  #             $ref: "#/definitions/TargetImage"
  #       "400":
  #         description: "Invalid status value"
  #     security:
  #     - petstore_auth:
  #       - "write:pets"
  #       - "read:pets"
  /targetImage/findByTags:
    get:
      tags:
      - "targetImage"
      summary: "Finds Target Image by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findTargetImagesByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TargetImage"
        "400":
          description: "Invalid tag value"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
  /targetImage/{targetImageId}:
    get:
      tags:
      - "targetImage"
      summary: "Find Target Image by ID"
      description: "Returns a single targetImage"
      operationId: "getTargetImageById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "targetImageId"
        in: "path"
        description: "ID of targetImage to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TargetImage"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "TargetImage not found"
      # security:
      # - api_key: []
    # post:
    #   tags:
    #   - "targetImage"
    #   summary: "Updates a Target Image in the store with form data"
    #   description: ""
    #   operationId: "updatePetWithForm"
    #   consumes:
    #   - "application/x-www-form-urlencoded"
    #   produces:
    #   - "application/xml"
    #   - "application/json"
    #   parameters:
    #   - name: "targetImageId"
    #     in: "path"
    #     description: "ID of targetImage that needs to be updated"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   - name: "name"
    #     in: "formData"
    #     description: "Updated name of the targetImage"
    #     required: false
    #     type: "string"
    #   - name: "status"
    #     in: "formData"
    #     description: "Updated status of the targetImage"
    #     required: false
    #     type: "string"
    #   responses:
    #     "405":
    #       description: "Invalid input"
    #   security:
    #   - petstore_auth:
    #     - "write:pets"
    #     - "read:pets"
    delete:
      tags:
      - "targetImage"
      summary: "Deletes a Target Image"
      description: ""
      operationId: "deleteTargetImage"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "targetImageId"
        in: "path"
        description: "TargetImage id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "TargetImage not found"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
  # /targetImage/{targetImageId}/uploadTileImage:
  #   post:
  #     tags:
  #     - "targetImage"
  #     summary: "uploads a Tile image"
  #     description: ""
  #     operationId: "uploadFile"
  #     consumes:
  #     - "multipart/form-data"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "targetImageId"
  #       in: "path"
  #       description: "ID of targetImage to update"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     - name: "additionalMetadata"
  #       in: "formData"
  #       description: "Additional data to pass to server"
  #       required: false
  #       type: "string"
  #     - name: "file"
  #       in: "formData"
  #       description: "file to upload"
  #       required: false
  #       type: "file"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/ApiResponse"
  #     security:
  #     - petstore_auth:
  #       - "write:pets"
  #       - "read:pets"
  # /mosaic/inventory:
  #   get:
  #     tags:
  #     - "mosaic"
  #     summary: "Returns targetImage inventories by status"
  #     description: "Returns a map of status codes to quantities"
  #     operationId: "getInventory"
  #     produces:
  #     - "application/json"
  #     parameters: []
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           type: "object"
  #           additionalProperties:
  #             type: "integer"
  #             format: "int32"
  #     security:
  #     - api_key: []
  /mosaic/process:
    post:
      tags:
      - "mosaic"
      summary: "Place a process order for a Mosaic Image"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for processing the targetImage"
        required: true
        schema:
          $ref: "#/definitions/Process"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Process"
        "400":
          description: "Invalid Process"
  /mosaic/process/{processId}:
    get:
      tags:
      - "mosaic"
      summary: "Find past processes by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "processId"
        in: "path"
        description: "ID of targetImage that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Process"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Process not found"
    delete:
      tags:
      - "mosaic"
      summary: "Delete past process by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "processId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Process not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Process:
    type: "object"
    required:
    - "targetImageId"
    properties:
      id:
        type: "integer"
        format: "int64"
      targetImageId:
        type: "integer"
        format: "int64"
      startDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Process Status"
        enum:
        - "ready"
        - "processing"
        - "done"
        default: "ready"
      complete:
        type: "boolean"
        default: false
      mosaicImageUrl:
        type: "string"
    xml:
      name: "Process"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  TargetImage:
    type: "object"
    required:
    - "name"
    - "tileImageUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "doggie image"
      tileImageUrls:
        type: "array"
        xml:
          name: "imageTileUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
    xml:
      name: "TargetImage"
  # ApiResponse:
  #   type: "object"
  #   properties:
  #     code:
  #       type: "integer"
  #       format: "int32"
  #     type:
  #       type: "string"
  #     message:
  #       type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
